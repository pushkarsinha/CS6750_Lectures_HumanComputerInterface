1
00:00:00,490 --> 00:00:02,640
 So our user has received some input.

2
00:00:02,640 --> 00:00:05,870
 It's entered her memory, she cognitively processed it.

3
00:00:05,870 --> 00:00:08,910
 Now it's time to act in the world in response.

4
00:00:08,910 --> 00:00:09,990
 In designing interfaces,

5
00:00:09,990 --> 00:00:13,910
 we're also interested in what is physically possible for users to do.

6
00:00:13,910 --> 00:00:14,810
 This includes things like,

7
00:00:14,810 --> 00:00:18,890
 how fast they can move, or how precisely they can click or tap on something.

8
00:00:18,890 --> 00:00:22,400
 For example, here are two versions of the Spotify control widget that appears

9
00:00:22,400 --> 00:00:24,190
 on Android phones.

10
00:00:24,190 --> 00:00:26,910
 On the left is the version that's available in the tray of the phone that

11
00:00:26,910 --> 00:00:30,430
 you can access at any given time by swiping down on the phone screen.

12
00:00:30,430 --> 00:00:33,240
 And on the right is the version that appears on the lock screen when you turn

13
00:00:33,240 --> 00:00:35,770
 on a locked phone while it's playing music.

14
00:00:35,770 --> 00:00:39,110
 In each case, the X closes the app,

15
00:00:39,110 --> 00:00:41,710
 which is consistent with a lot of other applications.

16
00:00:41,710 --> 00:00:42,310
 The forward,

17
00:00:42,310 --> 00:00:46,210
 back and pause buttons are similarly consistent with their usual meanings.

18
00:00:46,210 --> 00:00:47,940
 I don't actually know what the plus sign here does.

19
00:00:47,940 --> 00:00:50,940
 It's doesn't have a clear mapping to some underlying function.

20
00:00:50,940 --> 00:00:55,430
 Now note on the left, we have the close button, in the top right corner.

21
00:00:55,430 --> 00:00:57,980
 It's far away from anything else in the widget.

22
00:00:57,980 --> 00:01:01,010
 On the right, the close button is right beside the skip button.

23
00:01:01,010 --> 00:01:03,270
 I can speak from considerable personal experience, and

24
00:01:03,270 --> 00:01:07,320
 say that the level of specificity or the level of precision required to tap

25
00:01:07,320 --> 00:01:11,880
 that X, instead of tapping the skip button, is pretty significant.

26
00:01:11,880 --> 00:01:14,840
 Especially if you're using this while running or driving, or

27
00:01:14,840 --> 00:01:18,500
 anything besides just sitting there, interacting directly with your phone.

28
00:01:18,500 --> 00:01:21,250
 The precision of the user's ability to tap on a button is

29
00:01:21,250 --> 00:01:24,050
 significantly reduced in those situations.

30
00:01:24,050 --> 00:01:27,900
 And in this case, that can lead to the quick error of closing the application

31
00:01:27,900 --> 00:01:30,930
 when all you're trying to do is skip forward to the next song.

32
00:01:30,930 --> 00:01:32,940
 This isn't an error in the perception of the screen.

33
00:01:32,940 --> 00:01:34,750
 It's not an error in their memory of the controls.

34
00:01:34,750 --> 00:01:38,210
 They're not thinking that the X button actually is the skip button.

35
00:01:38,210 --> 00:01:40,780
 This is just an error in what they're physically able to perform at

36
00:01:40,780 --> 00:01:41,910
 a given time.

37
00:01:41,910 --> 00:01:45,140
 The interface relies on more precision than they would have in many

38
00:01:45,140 --> 00:01:46,800
 circumstances.

39
00:01:46,800 --> 00:01:50,420
 So this design doesn't take into consideration the motor system

40
00:01:50,420 --> 00:01:54,920
 of the user or the full context surrounding usage of this application.

41
00:01:54,920 --> 00:01:57,290
 This isn't as significant in the design on the left,

42
00:01:57,290 --> 00:01:59,990
 because there's more room around that close button.

43
00:01:59,990 --> 00:02:01,290
 If I aim for the forward button and

44
00:02:01,290 --> 00:02:04,110
 miss, the worst that's going to happen is I might pause it.

45
00:02:04,110 --> 00:02:05,840
 I'm not going to close it by accident.

46
00:02:05,840 --> 00:02:09,533
 This is one example of how we need to be aware of the constraints on the user's

47
00:02:09,533 --> 00:02:10,169
 motor system.

48
00:02:10,169 --> 00:02:14,110
 What they can physically do, how precise or accurate they can be, and so on.

49
00:02:14,110 --> 00:02:16,925
 And we have to be aware of that in the context where the application is

50
00:02:16,925 --> 00:02:18,510
 going to be used as well.

51
00:02:18,510 --> 00:02:21,820
 These buttons are no smaller than the keys on a smart phone keyboard but

52
00:02:21,820 --> 00:02:24,940
 we expect more specificity when they're sitting there typing with their thumbs,

53
00:02:24,940 --> 00:02:26,050
 as opposed to reaching over and

54
00:02:26,050 --> 00:02:28,630
 interacting real quick on something on the lock screen.

55
00:02:28,630 --> 00:02:31,150
 Now of course, there might be other constraints around this.

56
00:02:31,150 --> 00:02:33,890
 There might be a reason why this button's placed there.

57
00:02:33,890 --> 00:02:36,768
 There might be some constraint in the Android system that doesn't let them use

58
00:02:36,768 --> 00:02:38,780
 more than one row of the lock screen.

59
00:02:38,780 --> 00:02:42,510
 In that case, we would need to make our interface more tolerant of errors.

60
00:02:42,510 --> 00:02:45,250
 Maybe require a double tap to close the app, or

61
00:02:45,250 --> 00:02:47,920
 maybe we mute it when it's pressed and then gives the user five seconds to

62
00:02:47,920 --> 00:02:49,940
 confirm that that's actually what they want to do.

63
00:02:49,940 --> 00:02:49,940
 Those are ways of reducing the penalty for errors.

