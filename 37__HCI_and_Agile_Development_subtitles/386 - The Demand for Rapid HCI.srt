1
00:00:00,000 --> 00:00:01,815
 Where did these changes come from?

2
00:00:01,815 --> 00:00:04,020
 We can think of them in terms of some of the costs

3
00:00:04,020 --> 00:00:06,720
 associated with elements of the design lifecycle.

4
00:00:06,720 --> 00:00:08,760
 Think back to before the age of the Internet,

5
00:00:08,760 --> 00:00:11,505
 developing software was very expensive.

6
00:00:11,505 --> 00:00:14,055
 It required a very specialized skill set.

7
00:00:14,055 --> 00:00:17,850
 Software distribution was done the same way we sold coffee mugs or bananas,

8
00:00:17,850 --> 00:00:20,415
 you'd go to the store and you'd physically buy the software.

9
00:00:20,415 --> 00:00:23,120
 That distribution method was expensive as well.

10
00:00:23,120 --> 00:00:25,295
 If you ship software that was hard to use,

11
00:00:25,295 --> 00:00:27,140
 the cost of fixing it was enormous.

12
00:00:27,140 --> 00:00:29,960
 You had to mail each individual person an update disk,

13
00:00:29,960 --> 00:00:34,280
 and really the only way to get user feedback or even to find out if it was usable,

14
00:00:34,280 --> 00:00:36,410
 was the same way you would do it before distribution,

15
00:00:36,410 --> 00:00:38,315
 by having users come in for testing.

16
00:00:38,315 --> 00:00:42,330
 All of this meant, there was an enormous need to get it right the first time.

17
00:00:42,330 --> 00:00:45,485
 If you didn't, it would be difficult to fix the actual software,

18
00:00:45,485 --> 00:00:47,330
 difficult to get the fix to users,

19
00:00:47,330 --> 00:00:49,525
 and difficult to find out that a fix was even needed.

20
00:00:49,525 --> 00:00:53,510
 Shigeru Miyamoto, the creator of Nintendo's best video game franchises,

21
00:00:53,510 --> 00:00:55,490
 describe this in terms of video games by saying,

22
00:00:55,490 --> 00:01:00,110
 "A delayed game is eventually good but a rushed game is forever bad".

23
00:01:00,110 --> 00:01:01,925
 The same applied to software.

24
00:01:01,925 --> 00:01:05,005
 Fast-forward to now though, is that still true?

25
00:01:05,005 --> 00:01:08,820
 Development isn't cheap now but it is cheaper than it used to be.

26
00:01:08,820 --> 00:01:11,180
 A single person can develop in a day what would have

27
00:01:11,180 --> 00:01:13,730
 taken a team of people months to do, 20 years ago.

28
00:01:13,730 --> 00:01:15,410
 Thanks to advances in hardware,

29
00:01:15,410 --> 00:01:17,905
 programming languages, and the available libraries.

30
00:01:17,905 --> 00:01:19,400
 You can look at all the imitators of

31
00:01:19,400 --> 00:01:22,280
 popular games on either the Android or the iPhone app store,

32
00:01:22,280 --> 00:01:24,935
 to quickly see how much development costs have come down.

33
00:01:24,935 --> 00:01:26,660
 It's certainly feasible to churn out

34
00:01:26,660 --> 00:01:29,200
 a really quick imitator when something becomes popular.

35
00:01:29,200 --> 00:01:32,090
 But more importantly, distribution for software is

36
00:01:32,090 --> 00:01:35,980
 now essentially free and updating software is essentially free as well.

37
00:01:35,980 --> 00:01:40,115
 Every day you can download new apps and have them update automatically in the background.

38
00:01:40,115 --> 00:01:41,960
 If you release something that has a bug in it,

39
00:01:41,960 --> 00:01:44,060
 you can fix it and roll out the fixed immediately.

40
00:01:44,060 --> 00:01:46,400
 Miyamoto's quote is no longer really accurate,

41
00:01:46,400 --> 00:01:49,345
 because it is possible to fix games after they're released.

42
00:01:49,345 --> 00:01:53,990
 Tesla for example, regularly pushes software updates to its cars via the Internet.

43
00:01:53,990 --> 00:01:55,340
 In the video game industry,

44
00:01:55,340 --> 00:01:58,730
 day one patches that fixed glitches on the very first day of release,

45
00:01:58,730 --> 00:02:00,385
 has pretty much become the standard.

46
00:02:00,385 --> 00:02:03,410
 Perhaps most importantly, we can gather usage data from

47
00:02:03,410 --> 00:02:06,560
 live users automatically and essentially for free as well.

48
00:02:06,560 --> 00:02:08,165
 It isn't just usage data,

49
00:02:08,165 --> 00:02:10,660
 it's product reviews, error reports, buzz on the Internet.

50
00:02:10,660 --> 00:02:13,880
 Lots of feedback about our applications now comes naturally,

51
00:02:13,880 --> 00:02:15,980
 without us having to spend any money to gather it.

52
00:02:15,980 --> 00:02:17,510
 What all this means is,

53
00:02:17,510 --> 00:02:19,370
 there is now more incentive to build something

54
00:02:19,370 --> 00:02:21,995
 fast and get it to users to start getting real feedback,

55
00:02:21,995 --> 00:02:23,465
 as early as possible.

56
00:02:23,465 --> 00:02:25,670
 Now make no mistake, this isn't

57
00:02:25,670 --> 00:02:28,860
 justification to just throw out the entire design lifecycle.

58
00:02:28,860 --> 00:02:33,040
 The majority of HCI design and research still goes through with a longer process.

59
00:02:33,040 --> 00:02:35,000
 You need several iterations through

60
00:02:35,000 --> 00:02:39,245
 the full design lifecycle for big websites, complex apps,

61
00:02:39,245 --> 00:02:41,465
 anything involving designing hardware,

62
00:02:41,465 --> 00:02:44,015
 anything involving a high-profile first impression

63
00:02:44,015 --> 00:02:45,890
 and really anything involving anything,

64
00:02:45,890 --> 00:02:47,885
 even somewhat high in stakes.

65
00:02:47,885 --> 00:02:51,725
 But that said, there exists a new niche for rapid development.

66
00:02:51,725 --> 00:02:55,250
 Maybe you came up with an idea for a simple Android game,

67
00:02:55,250 --> 00:02:58,070
 in the time it would take you to go through this longer process,

68
00:02:58,070 --> 00:03:00,860
 you could probably implement the game and get it in front of a real users,

69
00:03:00,860 --> 00:03:02,435
 and get a lot more feedback.

70
00:03:02,435 --> 00:03:04,315
 That's what we're discussing here.

71
00:03:04,315 --> 00:03:07,220
 How do you take the principles we've covered so far and

72
00:03:07,220 --> 00:03:07,220
 apply them to a rapid, agile development process?

